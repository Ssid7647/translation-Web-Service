#URL => https://www.cdac.in/index.aspx?id=ev_hpc_intel_comm_tool
hyPACK-2013
Reach Us
Skip to navigation
Skip to main content
C-DAC Centres
Bengaluru
Chennai
Delhi
Hyderabad
Kolkata
Mohali
Mumbai
Noida
Patna
Pune
Silchar
Thiruvananthapuram
Sitemap
Blog
Choose Language
Assamese
Bangla
Bodo
Dogri
Gujarati
Kannada
Konkani
Kashmiri
Kashmiri-Keshur
Maithili
Malayalam
Manipuri
Manipuri (N)
Marathi
Nepali
Oriya
Punjabi
Santali
Santali (N)
Sanskrit
Sindhi
Sindhi (N)
Tamil
Telugu
Urdu
Translation powered by GoTranslate
Regional Language Policy
A-
A+
Toggle navigation
Home
About C-DAC (current)
Products & Services
Research & Development
Press Kit
Downloads
Careers
Tenders
Contact Us
Search
Events
Tech Program
Multicore
ARM
Coprocessor
GPUs
Cluster
Applications
Multicore Technologies
Mode-1 Multi-cores
Memory Allocators
OpenMP
Intel TBB
Pthreads
Java - Threads
Charm++ Prog.
Message Passing (MPI)
MPI-OpenMP
MPI-Intel TBB
MPI-Pthread
Compiler Opt. Features
Threads-Perf.
Math. lib.
Threads-Prof.
& tools
Threads-I/O Perf.
PGAS:UPC/CAF/GA
Software Threading : Intel Tools
Contents
Overview
1. Intel Software Development Tools Programs :
2. Intel Software Development Tools Assignment Programs:
3. Intel Tools Presentation :
4. Software Tools Demonstration Programs :
5. MPI :
6. PAPI :
7. Commoly Used Tools :
8. Comp.& Exec. : MPI :
9. Example Programs - MPI Tools on Clusters :
10. Example Programs - Using PAPI :
Example 1.1
Write a Pthread program to find out number of primes number with in range 1 to 20000 using shared variable.
Using Intel Thread Checker, Find out Whether any Data Race Condition appears during execution.
Example 1.2
Take Correct Version of Example 1.1.
Use Intel VTune Performance Analyzer to analyze this application to reduce execution time.
(.
Assignment )
Example 1.3
Write a Pthread program to compute Matrix Matrix Multiplication.
Use Intel Thread Checker with this application to find out any possible existence of deadlock , data race situation.
Example 1.4
Use Example 1.3 with Intel Vtune Performance Analyzer to find out most time consuming section of this application.
Take appropriate corrective measure and develop new version of optimized application.
Assignment )
Introduction
For extracting maximum efficiency from multicore, we need to execute tasks in parallel.
No use of adding that extra core if it sits idle while the first core is executing your neat serial program.
To execute in parallel means that you have to split up the computations into separate threads that run concurrently.
However it seems difficult to organize multiple work at single time.
As a result application meant for multicore system, become difficult to design and error prone.
The lack of parallel-programming tools and expertise among designers may threaten the progress of multi-core architectures.
Fortunately, there are parallel programming tools, which allow application desingers to design and debug parallel application more effectively.
How to use Thread Checker
step 1: from command line do the following
$ source /opt/intel/itt/tcheck/bin/32/tcheckvars.sh
step 2:  Go to the directory, where your executable resides.
step 3:  Use following command
$ tcheck_cl ./ <your-executable-name>
step 4:  wait till thread checker complete it execution and display human readable diagnostic of your executable.
Intel® Thread Checker detects data races, deadlocks, stalls, and other threading issues.
It can detect the potential for these errors even if the error does not occur during an analysis session.
Use Thread Checker to filter out specific types of diagnostics, identify critical source locations, and get tips to improve the robustness of your parallel software.
Output :
Figure 1. Intel Thread Checker
Intel Thread Profiler
Intel® Thread Profiler helps you improve the performance of applications threaded with Windows* API, OpenMP* , or POSIX* threads (Pthreads*).
Use Thread Profiler to:
- Identify bottlenecks that limit the parallel performance of your multi-threaded application.
- Locate synchronization delays, stalled threads, excessive blocking time, and ineffective utilization of processors.
- Find the best sections of code to optimize for sequential performance and for threaded performance.
- Compare scalability across different numbers of processors or using different threading methods.
Output :
Figure 1. Intel Thread Profiler
The VTuneT Performance Analyzer provides information on the performance of your code.
The VTune analyzer shows you the performance issues, enabling you to focus your tuning effort and get the best performance boost in the least amount of time.
Output :
Figure 2. Intel VTune performance analzer
How to use VTune
step 1: from your source code directory type following command.
$ source /opt/intel/vtune/bin/vtunevars.sh
step 2:  Use following command to open VTune GUI
$ vtlec
High Performance Computing,
Grid & Cloud Computing
Multilingual Computing & Heritage Computing
Professional Electronics,
VLSI & Embedded Systems
Software Technologies including FOSS
Cyber Security & Cyber Forensics
Health Informatics
Education & Training
Related Links
Office Contact Information
Career Opportunities
Website Policies
Copyright Policy
Terms & Conditions
Help
© 2021
C-DAC.
All rights reserved
Last Updated: Tuesday, January 30, 2018
Website owned & maintained by: Centre for Development of Advanced Computing (C-DAC)
Top
C-DAC LOGO
Manipuri(N)
Santali(N)
Sindhi(N)
dbg
lbg
MEITY
Digital India
Azadi Ka Amrit Mahotsav
India.gov
BHIM
Swachh Bharat
Koo
Facebook
linkedin
twitter
