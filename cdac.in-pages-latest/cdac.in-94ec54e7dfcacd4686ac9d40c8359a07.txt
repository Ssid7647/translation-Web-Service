#URL => https://www.cdac.in/index.aspx?id=ev_hpc_papi_parallels
Hypack-2013
Reach Us
Skip to navigation
Skip to main content
C-DAC Centres
Bengaluru
Chennai
Delhi
Hyderabad
Kolkata
Mohali
Mumbai
Noida
Patna
Pune
Silchar
Thiruvananthapuram
Sitemap
Blog
Choose Language
Assamese
Bangla
Bodo
Dogri
Gujarati
Kannada
Konkani
Kashmiri
Kashmiri-Keshur
Maithili
Malayalam
Manipuri
Manipuri (N)
Marathi
Nepali
Oriya
Punjabi
Santali
Santali (N)
Sanskrit
Sindhi
Sindhi (N)
Tamil
Telugu
Urdu
Translation powered by GoTranslate
Regional Language Policy
A-
A+
Toggle navigation
Home
About C-DAC (current)
Products & Services
Research & Development
Press Kit
Downloads
Careers
Tenders
Contact Us
Search
Events
Tech Program
Multicore
ARM
Coprocessor
GPUs
Cluster
Applications
PAPI
Mode-1 Multi-cores
Memory Allocators
OpenMP
Intel TBB
Pthreads
Java - Threads
Charm++ Prog.
Message Passing (MPI)
MPI-OpenMP
MPI-Intel TBB
MPI-Pthread
Compiler Opt. Features
Threads-Perf.
Math. lib.
Threads-Prof.
& tools
Threads-I/O Perf.
PGAS:UPC/CAF/GA
Using PAPI with Parallel Programs
Example 3.1
Write a parallel program to find the minimum values in Integer list using pthreads and capture the Instructions executed, Total Cycles and Load/Store Instructions for each thread using the PAPI thread PAPI support.
Description of Programs using PAPI with parallel programs
Example 3.1 :   Write a parallel program to find the minimum values in Integer list using pthreads and capture the Instructions executed, Total Cycles and Load/Store Instructions for each thread using the PAPI thread PAPI support.
(Download source code : ) papi-pthreads-find-min-value.c / MakeFile
Objective
Write Pthread code to Find out minimum in an un-sorted integer array and get the hardware counters data using PAPI for each thread.
The program randomly generated the list of integers.The list of integers is partitioned equally among the threads.
The size of each thread's partition of stored in a variable and the pointer to the start of each thread's partial list is passed to it as a pointer.The minimum value is protected by the mutex-lock .Threads execute the mutex lock to gain exclusive access to the minimum value.
Once this access is gained, the value is updated as required, and the lock subsequently released.
Since at any time, only one thread can hold the lock, only one thread can update the value.
As each thread does the work, an event set is created with the events PAPI_TOT_INS, PAPI_TOT_CYC, & PAPI_LST_INS and these events data for each thread are captured.
Input
Number of Threads, Size of the Integer array in terms of Class where
Class A : 10^7
Class B : 10^8
Class C : 10^9
Output
Minimum Value of the list and the execution time with the events data of each therad.
High Performance Computing,
Grid & Cloud Computing
Multilingual Computing & Heritage Computing
Professional Electronics,
VLSI & Embedded Systems
Software Technologies including FOSS
Cyber Security & Cyber Forensics
Health Informatics
Education & Training
Related Links
Office Contact Information
Career Opportunities
Website Policies
Copyright Policy
Terms & Conditions
Help
Â© 2021
C-DAC.
All rights reserved
Last Updated: Tuesday, January 30, 2018
Website owned & maintained by: Centre for Development of Advanced Computing (C-DAC)
Top
C-DAC LOGO
Manipuri(N)
Santali(N)
Sindhi(N)
dbg
lbg
MEITY
Digital India
Azadi Ka Amrit Mahotsav
India.gov
BHIM
Swachh Bharat
Koo
Facebook
linkedin
twitter
