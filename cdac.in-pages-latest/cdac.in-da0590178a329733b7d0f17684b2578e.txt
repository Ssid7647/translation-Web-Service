#URL => https://www.cdac.in/index.aspx?id=ev_hpc_hypack13_mode01_multicore_charmplusplus
hyPACK-2013
Reach Us
Skip to navigation
Skip to main content
C-DAC Centres
Bengaluru
Chennai
Delhi
Hyderabad
Kolkata
Mohali
Mumbai
Noida
Patna
Pune
Silchar
Thiruvananthapuram
Sitemap
Blog
Choose Language
Assamese
Bangla
Bodo
Dogri
Gujarati
Kannada
Konkani
Kashmiri
Kashmiri-Keshur
Maithili
Malayalam
Manipuri
Manipuri (N)
Marathi
Nepali
Oriya
Punjabi
Santali
Santali (N)
Sanskrit
Sindhi
Sindhi (N)
Tamil
Telugu
Urdu
Translation powered by GoTranslate
Regional Language Policy
A-
A+
Toggle navigation
Home
About C-DAC (current)
Products & Services
Research & Development
Press Kit
Downloads
Careers
Tenders
Contact Us
Search
Events
Tech Program
Multicore
ARM
Coprocessor
GPUs
Cluster
Applications
Multicore Technologies
Mode-1 Multi-cores
Memory Allocators
OpenMP
Intel TBB
Pthreads
Java - Threads
Charm++ Prog.
Message Passing (MPI)
MPI-OpenMP
MPI-Intel TBB
MPI-Pthread
Compiler Opt. Features
Threads-Perf.
Math. lib.
Threads-Prof.
& tools
Threads-I/O Perf.
PGAS:UPC/CAF/GA
hypack-2013 Prog. on Multi-Cores Using Charm++
Charm++ is a parallel object-oriented programming language based on C++ and developed in the  Parallel Programming Laboratory  †80.(  laxmikant-kale )†81.
at the University of Illinois.
Charm++ is designed with the goal of enhancing programmer productivity by providing a high-level abstraction of a parallel program while at the same time delivering good performance on a wide variety of underlying hardware platforms.
Please refer  CHARM++ Programming Language Manual.
†82.
At the heart of any CHARM++ program is a scheduler that repetitively chooses a message from the available pool of messages, and executes the computations associated with that message.
The programmer-visible entities in a CHARM++ program are:
Concurrent Objects : called chares
Communication Objects : Messages
Readonly data
Programs written in Charm++ are decomposed into a number of cooperating message-driven objects called   chares.
When a programmer invokes a method on an object, the Charm++ runtime system sends a message to the invoked object, which may reside on the local processor or on a remote processor in a parallel computation.
This message triggers the execution of code within the   chare  to handle the message asynchronously.
chares may be organized into indexed collections called   chare   arrays and messages may be sent to individual chares within a chare array or to the entire i> chare array simultaneously.
The chares in a program are mapped to physical processors by an adaptive runtime system.
The mapping of chares to processors is transparent to the programmer, and this transparency permits the runtime system to dynamically change the assignment of chares to processors during program execution to support capabilities such as measurement-based load balancing, fault tolerance, automatic checkpointing, and the ability to shrink and expand the set of processors used by a parallel program.
Adaptive MPI (AMPI)  †83.
is an implementation of the Message Passing Interface standard on top of the Charm++ runtime system and provides the capabilities of Charm++ in a more traditional MPI programming model.
AMPI encapsulates each MPI process within a user-level migratable thread implemented as a Charm++ object.
By embedding each thread with a i> chare , AMPI programs can automatically take advantage of the features of the Charm++ runtime system with little or no changes to the underlying MPI program.
The application simulation packages such as  OpenAtom -Ab Initio Molecular Dynamics , †84.
NAMD - Molecular Dynamics , †85.
and  Cosmology and N-Body Codes  †86.are implemented on Parallel Processing Platforms using Charm++.
In hypack-2013 workshop, Charm++ with MPI Programming environment is provided to develop large scale parallel codes on HPC GPU Cluster, in collaboration with  Parallel Programming Laboratory, †87.
Department of Computer Science, University of Illinois
High Performance Computing,
Grid & Cloud Computing
Multilingual Computing & Heritage Computing
Professional Electronics,
VLSI & Embedded Systems
Software Technologies including FOSS
Cyber Security & Cyber Forensics
Health Informatics
Education & Training
Related Links
Office Contact Information
Career Opportunities
Website Policies
Copyright Policy
Terms & Conditions
Help
© 2021
C-DAC.
All rights reserved
Last Updated: Tuesday, January 30, 2018
Website owned & maintained by: Centre for Development of Advanced Computing (C-DAC)
Top
C-DAC LOGO
Manipuri(N)
Santali(N)
Sindhi(N)
dbg
lbg
MEITY
Digital India
Azadi Ka Amrit Mahotsav
India.gov
BHIM
Swachh Bharat
Koo
Facebook
linkedin
twitter
